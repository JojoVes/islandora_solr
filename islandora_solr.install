<?php

/**
 * @file
 * Implementations of installation hooks.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Component\Utility\Xss;
use Drupal\islandora_solr\Form\ConfigFieldFormBase;
use Drupal\islandora_solr\Form\AdminIndexSettings;

/**
 * Implements hook_requirements().
 */
function islandora_solr_requirements($phase) {
  $t = 't';
  $requirements = [];
  require_once dirname(__FILE__) . '/src/SolrPhpClient/Apache/Solr/Apache_Solr_Service.php';
  if ($phase == 'install') {
    if (!class_exists('Drupal\islandora_solr\SolrPhpClient\Apache\Solr\Apache_Solr_Service')) {
      $requirements['islandora_solr'] = [
        'title' => $t('Missing Apache Client'),
        'description' => $t('This module requires the <a href="@url">Apache Solr PHP Client</a>. Please install the client in the root directory of this module before continuing.', [
          '@url' => 'http://code.google.com/p/solr-php-client',
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function islandora_solr_install() {
  $t = 't';
  $message = $t(
    'Islandora Solr @link',
    [
      '@link' => Link::fromTextAndUrl($t('configuration page'), Url::fromRoute('islandora_solr.admin_settings'))->toString(),
    ]
  );
  drupal_set_message(Xss::filter($message));
}

/**
 * Implements hook_uninstall().
 */
function islandora_solr_uninstall() {
  AdminIndexSettings::stateDeleteAll();
}

/**
 * Implements hook_schema().
 */
function islandora_solr_schema() {
  $schema['islandora_solr_collection_sort_strings'] = [
    'description' => 'Table that stores sort strings for collection objects.',
    'fields' => [
      'collection_pid' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The collection PID',
      ],
      'sort_string' => [
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
        'description' => 'Sort string for the collection',
      ],
    ],
    'primary key' => [['collection_pid', 191]],
  ];
  return $schema;
}

/**
 * Migrate old Drupal database fields into the new configuration.
 */
function islandora_solr_update_8001() {
  $db = \Drupal::database();
  $schema = $db->schema();
  if (!$schema->tableExists('islandora_solr_fields')) {
    return t('No islandora_solr_fields table found in the database; nothing to import');
  }

  module_load_include('inc', 'islandora_solr', 'includes/admin');
  module_load_include('inc', 'islandora_solr', 'includes/db');
  $fields = $db->select('islandora_solr_fields', 'isf')
    ->fields('isf', [])
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('islandora_solr.fields');
  $migrated = 0;
  foreach ($fields as &$field) {
    $settings = unserialize($field['solr_field_settings']);
    // A previous update in 7.x split the link_rendering property into two other
    // properties, but maintained support for the link_rendering property for
    // legacy purposes. Use of this property is being phased out in 8.x.
    if (isset($settings['link_rendering'])) {
      $link_choice = $settings['link_rendering'];
      $settings['link_to_object'] = FALSE;
      $settings['link_to_search'] = FALSE;
      if ($link_choice === 'object') {
        $settings['link_to_object'] = TRUE;
      }
      elseif ($link_choice === 'search') {
        $settings['link_to_search'] = TRUE;
      }
      unset($settings['link_rendering']);
    }
    $field_config = islandora_solr_get_default_field_configuration($field['solr_field'], $field['field_type'], $settings);
    // Don't need to hang onto this since the configs are split by type.
    unset($field_config['field_type']);

    // XXX: Given how role identification has changed between D7 and D8, where
    // D7 used numeric IDs while D8 uses machine names, and it is unknown at
    // time of writing how to discover/hook into the mapping, let's just drop
    // the permission configuration.
    if (isset($field_config['permissions']) && $field_config['permissions']) {
      \Drupal::logger('islandora_solr-7to8')->warning(t("@type.@field had permissions associated which we have not migrated.", [
        '@type' => $field['field_type'],
        '@field' => $field['solr_field'],
      ]));
    }
    $field_config['enable_permissions'] = FALSE;
    $field_config['permissions'] = NULL;

    $field_config['weight'] = (int) $field['weight'];
    $machine_name = ConfigFieldFormBase::generateFieldKey($field['solr_field']);
    $config->set("{$field['field_type']}.{$machine_name}", $field_config);
    $migrated++;
  }
  $config->save(TRUE);
  if ($migrated == count($fields)) {
    $schema->dropTable('islandora_solr_fields');
    return t('Migrated @count/@total field(s); the islandora_solr_fields table has been removed', [
      '@count' => $migrated,
      '@total' => count($fields),
    ]);
  }
  else {
    return t('Migrated @count/@total field(s); fields with unknown field types were not migrated, and the islandora_solr_fields table was not removed as a result.', [
      '@count' => $migrated,
      '@total' => count($fields),
    ]);
  }
}

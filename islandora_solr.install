<?php

/**
 * @file
 * Implementations of installation hooks.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Component\Utility\Xss;
use Drupal\islandora_solr\Form\ConfigureFacetField;
use Drupal\islandora_solr\Form\ConfigureResultField;
use Drupal\islandora_solr\Form\ConfigureSearchField;
use Drupal\islandora_solr\Form\ConfigureSortField;

/**
 * Implements hook_requirements().
 */
function islandora_solr_requirements($phase) {
  $t = 't';
  $requirements = [];
  require_once dirname(__FILE__) . '/src/SolrPhpClient/Apache/Solr/Apache_Solr_Service.php';
  if ($phase == 'install') {
    if (!class_exists('Drupal\islandora_solr\SolrPhpClient\Apache\Solr\Apache_Solr_Service')) {
      $requirements['islandora_solr'] = [
        'title' => $t('Missing Apache Client'),
        'description' => $t('This module requires the <a href="@url">Apache Solr PHP Client</a>. Please install the client in the root directory of this module before continuing.', [
          '@url' => 'http://code.google.com/p/solr-php-client',
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function islandora_solr_install() {
  $t = 't';
  $message = $t(
    'Islandora Solr @link',
    [
      '@link' => Link::fromTextAndUrl($t('configuration page'), Url::fromRoute('islandora_solr.admin_settings'))->toString(),
    ]
  );
  drupal_set_message(Xss::filter($message));
}

/**
 * Implements hook_schema().
 */
function islandora_solr_schema() {
  $schema['islandora_solr_collection_sort_strings'] = [
    'description' => 'Table that stores sort strings for collection objects.',
    'fields' => [
      'collection_pid' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The collection PID',
      ],
      'sort_string' => [
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
        'description' => 'Sort string for the collection',
      ],
    ],
    'primary key' => [['collection_pid', 191]],
  ];
  return $schema;
}

/**
 * Migrate old Drupal database fields into the new configuration.
 */
function islandora_solr_update_8000() {
  $db = \Drupal::database();
  $schema = $db->schema();
  if (!$schema->tableExists('islandora_solr_fields')) {
    return t('No islandora_solr_fields table found in the database; nothing to import');
  }

  $fields = $db->select('islandora_solr_fields', 'isf')
    ->fields('isf', [])
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('islandora_solr.fields');
  // Rather than reinventing the wheel just use the field config mapper from the
  // field forms.
  $field_config_class = [
    'facet_fields' => ConfigureFacetField::class,
    'sort_fields' => ConfigureSortField::class,
    'result_fields' => ConfigureResultField::class,
    'search_fields' => ConfigureSearchField::class,
  ];
  $migrated = 0;
  foreach ($fields as &$field) {
    $settings = unserialize($field['solr_field_settings']);
    if (isset($field_config_class[$field['field_type']])) {
      $field_config = call_user_func_array([$field_config_class[$field['field_type']], 'getFieldConfiguration'], [$settings]);
      $machine_name = call_user_func_array([$field_config_class[$field['field_type']], 'generateFieldKey'], [$field['solr_field']]);
      $config->set("{$field['field_type']}.{$machine_name}", $field_config);
      $migrated++;
    }
  }
  $config->save(TRUE);
  if ($migrated == count($fields)) {
    $schema->dropTable('islandora_solr_fields');
    return t('Migrated @count/@total field(s); the islandora_solr_fields table has been removed', [
      '@count' => $migrated,
      '@total' => count($fields),
    ]);
  }
  else {
    return t('Migrated @count/@total field(s); fields with unknown field types were not migrated, and the islandora_solr_fields table was not removed as a result.', [
      '@count' => $migrated,
      '@total' => count($fields),
    ]);
  }
}

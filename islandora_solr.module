<?php

/**
 * @file
 * Implementation of Solr search for the Islandora fedora_search module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

// @codingStandardsIgnoreStart
const ISLANDORA_SOLR_SEARCH_PATH = 'islandora/search';
const ISLANDORA_SOLR_QUERY_SPLIT_REGEX = '/(?<!\\\\) /';
const ISLANDORA_SOLR_QUERY_FIELD_VALUE_SPLIT_REGEX = '/(?<!\\\\):/';
const ISLANDORA_SOLR_QUERY_FACET_LUCENE_ESCAPE_REGEX_DEFAULT = '/(\+|-|&&|\|\||!|\(|\)|\{|\}|\[|\]|\^| |~|\*|\?|\:|"|\\\\|\\/)/';
const ISLANDORA_SOLR_FACET_BUCKET_CLASSES_HOOK_BASE = 'islandora_solr_facet_bucket_classes';
const ISLANDORA_SOLR_BREADCRUMB_BACKEND = 'islandora_solr_breadcrumb_backend';
// @codingStandardsIgnoreEnd
// Includes functions for common db queries.
require_once dirname(__FILE__) . '/includes/db.inc';
// Includes functions for common tasks.
require_once dirname(__FILE__) . '/includes/utilities.inc';
// Includes functions to create Islandora Solr blocks.
require_once dirname(__FILE__) . '/includes/blocks.inc';
// Includes functions for connecting to Solr and Luke.
require_once dirname(__FILE__) . '/includes/luke.inc';

/**
 * Implements hook_theme().
 */
function islandora_solr_theme() {
  $file = 'theme.inc';

  return [
    // Results page.
    'islandora_solr_wrapper' => [
      'file' => "theme/$file",
      'template' => 'islandora-solr-wrapper',
      'variables' => [
        'results' => NULL,
        'secondary_profiles' => NULL,
        'elements' => [],
      ],
    ],
    // Default results display.
    'islandora_solr' => [
      'file' => "theme/$file",
      'template' => 'islandora-solr',
      'variables' => [
        'results' => NULL,
        'elements' => [],
        'pids' => [],
      ],
    ],
     // Default facet.
    'islandora_solr_facet' => [
      'file' => "theme/$file",
      'template' => 'islandora-solr-facet',
      'variables' => ['buckets' => NULL, 'hidden' => FALSE, 'pid' => NULL],
    ],
     // Range slider.
    'islandora_solr_range_slider' => [
      'file' => "theme/$file",
      'template' => 'islandora-solr-range-slider',
      'variables' => [
        'form_key' => NULL,
        'gap' => NULL,
        'range_from' => NULL,
        'range_to' => NULL,
      ],
    ],
    'islandora_solr_search_navigation_block' => [
      'file' => "theme/$file",
      'template' => 'islandora-solr-search-navigation-block',
      'variables' => [
        'return_link' => NULL,
        'prev_link' => NULL,
        'next_link' => NULL,
        'prev_text' => NULL,
        'return_text' => NULL,
        'next_text' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_islandora_solr_primary_display().
 */
function islandora_solr_islandora_solr_primary_display() {
  return [
    'default' => [
      'name' => t('List (default)'),
      'module' => 'islandora_solr',
      'class' => "IslandoraSolrResults",
      'function' => "displayResults",
      'description' => t("Display search results as a list view"),
    ],
  ];
}

/**
 * Check if the current context is the search results page.
 *
 * @todo Checking for display might not be the best way to do this. Need to
 *   review the way blocks are created.
 *
 * @param object $islandora_solr_query
 *   The IslandoraSolrQueryProcessor object which includes the current query
 *   settings but at the beginning of
 *   IslandoraSolrQueryProcessor::executeQuery().
 *
 * @return bool
 *   Returns TRUE if the context is the search results page. FALSE if not.
 */
function islandora_solr_results_page($islandora_solr_query) {

  if (isset($islandora_solr_query->display)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Check if dismax is configured for the currently selected request handler.
 *
 * Results are cached, to reduce chatter between Drupal and Solr.
 *
 * @param bool $reset
 *   Force cache revalidation.
 *
 * @return bool
 *   TRUE if the current request handler supports dismax, FALSE if it does not.
 */
function islandora_solr_check_dismax($reset = FALSE) {
  $cache_id = 'islandora_solr_dismax';
  $cache = $reset ? FALSE : \Drupal::cache()->get($cache_id);
  if (!$cache) {
    module_load_include('inc', 'islandora_solr', 'includes/admin');
    $solr_url = \Drupal::config('islandora_solr.settings')->get('islandora_solr_url');
    $handler = \Drupal::config('islandora_solr.settings')->get('islandora_solr_request_handler');
    $dismax = _islandora_solr_check_dismax($solr_url, $handler);
    \Drupal::cache()->set($cache_id, $dismax);
    return $dismax;
  }
  else {
    return $cache->data;
  }
}

/**
 * Implements hook_islandora_basic_collection_query_backends().
 */
function islandora_solr_islandora_basic_collection_query_backends() {
  $module_path = drupal_get_path('module', 'islandora_solr');
  return [
    'islandora_solr_query_backend' => [
      'title' => t('Solr'),
      'callable' => 'islandora_solr_islandora_basic_collection_backend_callable',
      'file' => "$module_path/includes/utilities.inc",
    ],
  ];
}

/**
 * Implements hook_islandora_compound_object_query_backends().
 */
function islandora_solr_islandora_compound_object_query_backends() {
  $module_path = drupal_get_path('module', 'islandora_solr');
  return [
    'islandora_solr_compound_query_backend' => [
      'title' => t('SOLR - Does a Solr query with filters. Configure fields on the <a href="@solr">Solr Backend</a> tab.',
        ['@solr' => Url::fromRoute('islandora_solr.compound_object')->toString()]
      ),
      'callable' => 'islandora_solr_compound_object_query',
      'file' => "$module_path/includes/utilities.inc",
    ],
  ];
}

/**
 * Implements hook_islandora_object_purged().
 */
function islandora_solr_islandora_object_purged($pid) {
  // XXX: Optional ability to have the system remove the object from the Solr
  // index.  Useful for pages that may rely on a solr query for displaying data
  // and require the index update to be instantaneous so that the object is not
  // included in any query results immediately after a purge.
  if (\Drupal::config('islandora_solr.settings')->get('islandora_solr_force_update_index_after_object_purge') == 1) {
    $options = [
      'body' => "<update><delete><id>{$pid}</id></delete><commit/></update>",
      'headers' => ['Content-Type' => 'text/xml; charset=UTF-8'],
    ];
    $client = \Drupal::httpClient();
    $client->request(
      'POST',
      \Drupal::config('islandora_solr.settings')->get('islandora_solr_url') . '/update',
      $options
    );
  }
}

/**
 * Implements hook_islandora_basic_collection_build_manage_object().
 */
function islandora_solr_islandora_basic_collection_build_manage_object(array $form, $object) {
  if (\Drupal::config('islandora_solr.settings')->get('islandora_solr_individual_collection_sorting')) {
    $form['manage_collection_object']['manage_collection_solr_sort'] = [
      '#id' => 'manage-collection-solr-sort',
      '#group' => 'manage_collection_solr_sort',
      '#access' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Set Solr Sort String'),
      'form' => \Drupal::formBuilder()->getForm('Drupal\islandora_solr\Form\ManageCollectionSortForm', $object),
    ];
    return $form;
  }
}

/**
 * Implements hook_form_islandora_basic_collection_admin_alter().
 */
function islandora_solr_form_islandora_basic_collection_admin_alter(&$form, FormStateInterface $form_state, $form_id) {
  $states = [
    'visible' => [
      ':input[name="islandora_basic_collection_display_backend"]' => ['value' => 'islandora_solr_query_backend'],
    ],
  ];
  $form['display_generation_details']['islandora_collection_display']['islandora_solr_collection_sort'] = [
    '#type' => 'textfield',
    '#title' => t('Sort field for collection query'),
    '#size' => 100,
    '#description' => t('One or more non-multivalued Solr fields to sort by when using the Solr collection query backend (by convention, multivalued fields have names that contain "_m" plus another letter at the end of their Solr names). Add " asc" or " desc" after each fieldname. If this setting is empty, the Solr default query sort will be used.'),
    '#default_value' => \Drupal::config('islandora_solr.settings')->get('islandora_solr_collection_sort'),
    '#states' => $states,
  ];
  $form['display_generation_details']['islandora_collection_display']['islandora_solr_individual_collection_sorting'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow individual sort strings per-collection'),
    '#description' => t('Allows per-collection sort strings to be configured. These sort strings can be set on the collection configuration page for individual collection objects.'),
    '#default_value' => \Drupal::config('islandora_solr.settings')->get('islandora_solr_individual_collection_sorting'),
    '#states' => $states,
  ];
  $form['display_generation_details']['islandora_collection_display']['islandora_solr_collection_sort_block_override'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow Solr sort block to override collection sort'),
    '#description' => t('Allows Solr sort block to override collection and default collection sort settings.'),
    '#default_value' => \Drupal::config('islandora_solr.settings')->get('islandora_solr_collection_sort_block_override'),
    '#states' => $states,
  ];
  $form['display_generation_details']['islandora_collection_display']['islandora_solr_collection_result_limit_block_override'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow Solr result limit block to override collection limit'),
    '#description' => t('Allows Solr result limit block to override the default collection limit.'),
    '#default_value' => \Drupal::config('islandora_solr.settings')->get('islandora_solr_collection_result_limit_block_override'),
    '#states' => $states,
  ];
  $form['#submit'][] = 'islandora_solr_form_islandora_basic_collection_admin_submit';
}

/**
 * Submit handler for the collection admin page additions.
 */
function islandora_solr_form_islandora_basic_collection_admin_submit($form, FormStateInterface $form_state) {
  $config = \Drupal::configFactory()->getEditable('islandora_solr.settings');
  $config->set('islandora_solr_collection_sort', $form_state->getValue('islandora_solr_collection_sort'));
  $config->set('islandora_solr_individual_collection_sorting', $form_state->getValue('islandora_solr_individual_collection_sorting'));
  $config->set('islandora_solr_collection_sort_block_override', $form_state->getValue('islandora_solr_collection_sort_block_override'));
  $config->set('islandora_solr_collection_result_limit_block_override', $form_state->getValue('islandora_solr_collection_result_limit_block_override'));
  $config->save();
}

/**
 * Implements hook_islandora_breadcrumbs_backends().
 */
function islandora_solr_islandora_breadcrumbs_backends() {
  $module_path = drupal_get_path('module', 'islandora_solr');
  return [
    ISLANDORA_SOLR_BREADCRUMB_BACKEND => [
      'title' => t('Islandora Solr'),
      'callable' => 'islandora_solr_islandora_breadcrumbs_backends_callable',
      'file' => "$module_path/includes/breadcrumbs.inc",
    ],
  ];
}
